version: "3.9"
services:
  pg:
    image: postgres:16-alpine
    container_name: catalog-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-catalog_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-catalog}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  catalog.api:
    build:
      context: ./Catalog
      dockerfile: Dockerfile
    image: catalog.api:dev
    container_name: catalog-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__CatalogDb: "Host=pg;Port=5432;Database=${DB_NAME:-catalog};Username=${DB_USER:-catalog_admin};Password=${DB_PASSWORD}"
    ports:
      - "5000:80"
      - "5001:443"

  order.api:
    build:
      context: ./Order
      dockerfile: Dockerfile
    image: order.api:dev
    container_name: order-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__OrderDb: "Host=pg;Port=5432;Database=${DB_NAME:-catalog};Username=${DB_USER:-catalog_admin};Password=${DB_PASSWORD}"
    ports:
      - "5002:80"

  user.api:
    build:
      context: ./User
      dockerfile: Dockerfile
    image: user.api:dev
    container_name: user-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__UserDb: "Host=pg;Port=5432;Database=${DB_NAME:-catalog};Username=${DB_USER:-catalog_admin};Password=${DB_PASSWORD}"
    ports:
      - "5003:80"

  shipping.api:
    build:
      context: ./Shipping
      dockerfile: Dockerfile
    image: shipping.api:dev
    container_name: shipping-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__ShippingDb: "Host=pg;Port=5432;Database=${DB_NAME:-catalog};Username=${DB_USER:-catalog_admin};Password=${DB_PASSWORD}"
    ports:
      - "5004:80"

  payment.api:
    build:
      context: ./Payment
      dockerfile: Dockerfile
    image: payment.api:dev
    container_name: payment-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      # Go's lib/pq driver expects a DSN in URI or key=value form, not the
      # semicolon style used by the .NET services.
      POSTGRES_DSN: "postgres://${DB_USER:-catalog_admin}:${DB_PASSWORD}@pg:5432/${DB_NAME:-catalog}?sslmode=disable"
    ports:
      - "7001:7001"
      - "7002:8080"

  cart.redis:
    image: redis:7-alpine
    container_name: cart-redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  cart.api:
    build:
      context: ./Cart
      dockerfile: Dockerfile
    image: cart.api:dev
    container_name: cart-api
    depends_on:
      - cart.redis
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__Redis: "cart.redis:6379"
    ports:
      - "5010:80"

  inventory.api:
    build:
      context: ./Inventory
      dockerfile: Dockerfile
    image: inventory.api:dev
    container_name: inventory-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      POSTGRES_DSN: "postgres://${DB_USER:-catalog_admin}:${DB_PASSWORD}@pg:5432/${DB_NAME:-catalog}?sslmode=disable"
    ports:
      - "8200:8000"

  analytics.api:
    build:
      context: ./Analytics
      dockerfile: Dockerfile
    image: analytics.api:dev
    container_name: analytics-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      ConnectionStrings__AnalyticsDb: "postgresql://${DB_USER:-catalog_admin}:${DB_PASSWORD}@pg:5432/${DB_NAME:-catalog}"
    ports:
      - "8100:8000"

  auth.api:
    build:
      context: ./Auth
      dockerfile: Dockerfile
    image: auth.api:dev
    container_name: auth-api
    depends_on:
      - pg
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__AuthDb: "Host=pg;Port=5432;Database=${DB_NAME:-catalog};Username=${DB_USER:-catalog_admin};Password=${DB_PASSWORD}"
    ports:
      - "7000:80"

  security.api:
    build:
      context: ./Security
      dockerfile: Dockerfile
    image: security.api:dev
    container_name: security-api
    depends_on:
      - pg
    restart: unless-stopped
    ports:
      - "8082:8082"

  notification.api:
    build:
      context: ./Notification
      dockerfile: Dockerfile
    image: notification.api:dev
    container_name: notification-api
    restart: unless-stopped
    environment:
      SMTP_HOST: smtp
      SMTP_PORT: 1025
      SMTP_FROM: no-reply@example.com
    ports:
      - "8200:8000"

  promotion.api:
    build:
      context: ./Promotion
      dockerfile: Dockerfile
    image: promotion.api:dev
    container_name: promotion-api
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "8400:8000"

  review.api:
    build:
      context: ./Review
      dockerfile: Dockerfile
    image: review.api:dev
    container_name: review-api
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "8500:8000"

  recommendation.api:
    build:
      context: ./Recommendation
      dockerfile: Dockerfile
    image: recommendation.api:dev
    container_name: recommendation-api
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "8600:8000"

  admin.api:
    build:
      context: ./Admin
      dockerfile: Dockerfile
    image: admin.api:dev
    container_name: admin-api
    depends_on:
      - catalog.api
      - order.api
      - user.api
      - inventory.api
    restart: unless-stopped
    environment:
      CATALOG_URL: http://catalog.api:80
      ORDER_URL: http://order.api:80
      USER_URL: http://user.api:80
      INVENTORY_URL: http://inventory.api:8000
    ports:
      - "8300:8000"

  gateway:
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    image: kong.gateway:dev
    container_name: gateway
    depends_on:
      - catalog.api
      - order.api
      - user.api
      - shipping.api
      - payment.api
      - cart.api
      - inventory.api
      - analytics.api
      - auth.api
      - security.api
      - notification.api
      - promotion.api
      - review.api
      - recommendation.api
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml  # 注意路径
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_SSL_CERT: /certs/gateway.crt
      KONG_SSL_CERT_KEY: /certs/gateway.key
    volumes:
      - ./Gateway/kong.yml:/kong/kong.yml
      - ./Gateway/certs:/certs:ro

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        # Use the host URL so browser requests resolve correctly
        VITE_API_BASE_URL: http://localhost:8000
        VITE_API_KEY: mytestkey123
    image: frontend.app:dev
    container_name: frontend
    depends_on:
      - gateway
    ports:
      - "3000:80"

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - gateway
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana-oss:10.4.2
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"

volumes:
  pgdata:
